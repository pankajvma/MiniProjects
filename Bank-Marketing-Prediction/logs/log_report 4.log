Sample 5421

Report for LogisticRegression()
LogisticRegression() Confusion  matrix:
[[782 172]
 [250 621]]

LogisticRegression() accuracy mean: 0.7701904215428549
LogisticRegression() accuracy std dev: 0.018837543930981738
LogisticRegression() preciosn score: 0.7831021437578815
LogisticRegression() recall score: 0.7129735935706085
LogisticRegression() f1 score: 0.7463942307692306
LogisticRegression() AUC: 0.7663400462611952

Classification report: 
              precision    recall  f1-score   support

           0       0.76      0.82      0.79       954
           1       0.78      0.71      0.75       871

    accuracy                           0.77      1825
   macro avg       0.77      0.77      0.77      1825
weighted avg       0.77      0.77      0.77      1825

Time taken: 0.20885920524597168
**************************************************
Reprot for KNeighborsClassifier()
KNeighborsClassifier() Confusion  matrix:
[[730 224]
 [ 15 856]]

KNeighborsClassifier() accuracy mean: 0.847653091180827
KNeighborsClassifier() accuracy std dev: 0.018639365381284124
KNeighborsClassifier() preciosn score: 0.7925925925925926
KNeighborsClassifier() recall score: 0.9827784156142365
KNeighborsClassifier() f1 score: 0.8774987186058432
KNeighborsClassifier() AUC: 0.8739887885199065

Classification report: 
              precision    recall  f1-score   support

           0       0.98      0.77      0.86       954
           1       0.79      0.98      0.88       871

    accuracy                           0.87      1825
   macro avg       0.89      0.87      0.87      1825
weighted avg       0.89      0.87      0.87      1825

Time taken: 1.551037311553955
**************************************************
Reprot for SVC(kernel='linear', random_state=0)
SVC(kernel='linear', random_state=0) Confusion  matrix:
[[783 171]
 [241 630]]

SVC(kernel='linear', random_state=0) accuracy mean: 0.7720165734797634
SVC(kernel='linear', random_state=0) accuracy std dev: 0.015592563651506174
SVC(kernel='linear', random_state=0) preciosn score: 0.7865168539325843
SVC(kernel='linear', random_state=0) recall score: 0.7233065442020666
SVC(kernel='linear', random_state=0) f1 score: 0.7535885167464116
SVC(kernel='linear', random_state=0) AUC: 0.7720306305915994

Classification report: 
              precision    recall  f1-score   support

           0       0.76      0.82      0.79       954
           1       0.79      0.72      0.75       871

    accuracy                           0.77      1825
   macro avg       0.78      0.77      0.77      1825
weighted avg       0.78      0.77      0.77      1825

Time taken: 13.434514284133911
**************************************************
Reprot for GaussianNB()
GaussianNB() Confusion  matrix:
[[711 243]
 [299 572]]

GaussianNB() accuracy mean: 0.6976707722280788
GaussianNB() accuracy std dev: 0.021640296721287165
GaussianNB() preciosn score: 0.701840490797546
GaussianNB() recall score: 0.6567164179104478
GaussianNB() f1 score: 0.6785290628706998
GaussianNB() AUC: 0.7009997183891862

Classification report: 
              precision    recall  f1-score   support

           0       0.70      0.75      0.72       954
           1       0.70      0.66      0.68       871

    accuracy                           0.70      1825
   macro avg       0.70      0.70      0.70      1825
weighted avg       0.70      0.70      0.70      1825

Time taken: 0.09602475166320801
**************************************************
Reprot for DecisionTreeClassifier(criterion='entropy')
DecisionTreeClassifier(criterion='entropy') Confusion  matrix:
[[835 119]
 [  0 871]]

DecisionTreeClassifier(criterion='entropy') accuracy mean: 0.9397149681741149
DecisionTreeClassifier(criterion='entropy') accuracy std dev: 0.006835011992490467
DecisionTreeClassifier(criterion='entropy') preciosn score: 0.8797979797979798
DecisionTreeClassifier(criterion='entropy') recall score: 1.0
DecisionTreeClassifier(criterion='entropy') f1 score: 0.9360558839333691
DecisionTreeClassifier(criterion='entropy') AUC: 0.9376310272536688

Classification report: 
              precision    recall  f1-score   support

           0       1.00      0.88      0.93       954
           1       0.88      1.00      0.94       871

    accuracy                           0.93      1825
   macro avg       0.94      0.94      0.93      1825
weighted avg       0.94      0.93      0.93      1825

Time taken: 0.41307830810546875
**************************************************
Reprot for RandomForestClassifier(criterion='entropy', n_estimators=10)
RandomForestClassifier(criterion='entropy', n_estimators=10) Confusion  matrix:
[[889  65]
 [  0 871]]

RandomForestClassifier(criterion='entropy', n_estimators=10) accuracy mean: 0.9594463496977543
RandomForestClassifier(criterion='entropy', n_estimators=10) accuracy std dev: 0.009475100025273906
RandomForestClassifier(criterion='entropy', n_estimators=10) preciosn score: 0.9305555555555556
RandomForestClassifier(criterion='entropy', n_estimators=10) recall score: 1.0
RandomForestClassifier(criterion='entropy', n_estimators=10) f1 score: 0.9640287769784173
RandomForestClassifier(criterion='entropy', n_estimators=10) AUC: 0.9659329140461216

Classification report: 
              precision    recall  f1-score   support

           0       1.00      0.93      0.96       954
           1       0.93      1.00      0.96       871

    accuracy                           0.96      1825
   macro avg       0.97      0.97      0.96      1825
weighted avg       0.97      0.96      0.96      1825

Time taken: 1.1234169006347656
**************************************************
Reprot for GradientBoostingClassifier(learning_rate=1.0)
GradientBoostingClassifier(learning_rate=1.0) Confusion  matrix:
[[833 121]
 [  7 864]]

GradientBoostingClassifier(learning_rate=1.0) accuracy mean: 0.9176076542254366
GradientBoostingClassifier(learning_rate=1.0) accuracy std dev: 0.01284246177538375
GradientBoostingClassifier(learning_rate=1.0) preciosn score: 0.8771573604060914
GradientBoostingClassifier(learning_rate=1.0) recall score: 0.9919632606199771
GradientBoostingClassifier(learning_rate=1.0) f1 score: 0.9310344827586208
GradientBoostingClassifier(learning_rate=1.0) AUC: 0.9325644395343072

Classification report: 
              precision    recall  f1-score   support

           0       0.99      0.87      0.93       954
           1       0.88      0.99      0.93       871

    accuracy                           0.93      1825
   macro avg       0.93      0.93      0.93      1825
weighted avg       0.94      0.93      0.93      1825

Time taken: 9.751381158828735
**************************************************
Reprot for AdaBoostClassifier()
AdaBoostClassifier() Confusion  matrix:
[[772 182]
 [201 670]]

AdaBoostClassifier() accuracy mean: 0.7871789055098146
AdaBoostClassifier() accuracy std dev: 0.01720989826497845
AdaBoostClassifier() preciosn score: 0.7863849765258216
AdaBoostClassifier() recall score: 0.7692307692307693
AdaBoostClassifier() f1 score: 0.7777132907719094
AdaBoostClassifier() AUC: 0.7892275439445251

Classification report: 
              precision    recall  f1-score   support

           0       0.79      0.81      0.80       954
           1       0.79      0.77      0.78       871

    accuracy                           0.79      1825
   macro avg       0.79      0.79      0.79      1825
weighted avg       0.79      0.79      0.79      1825

Time taken: 3.84182071685791
**************************************************
