Sample 30000

Report for LogisticRegression()
LogisticRegression() Confusion  matrix:
[[5202 1176]
 [1458 4236]]

LogisticRegression() accuracy mean: 0.7833371990586235
LogisticRegression() accuracy std dev: 0.007164629449522816
LogisticRegression() preciosn score: 0.7827050997782705
LogisticRegression() recall score: 0.743940990516333
LogisticRegression() f1 score: 0.7628309022150189
LogisticRegression() AUC: 0.7797785855686087

Classification report: 
              precision    recall  f1-score   support

           0       0.78      0.82      0.80      6378
           1       0.78      0.74      0.76      5694

    accuracy                           0.78     12072
   macro avg       0.78      0.78      0.78     12072
weighted avg       0.78      0.78      0.78     12072

Time taken: 0.5804426670074463
**************************************************
Report for KNeighborsClassifier()
KNeighborsClassifier() Confusion  matrix:
[[5000 1378]
 [  56 5638]]

KNeighborsClassifier() accuracy mean: 0.8667603971617188
KNeighborsClassifier() accuracy std dev: 0.006545721305389754
KNeighborsClassifier() preciosn score: 0.8035917901938426
KNeighborsClassifier() recall score: 0.990165086055497
KNeighborsClassifier() f1 score: 0.8871754523996853
KNeighborsClassifier() AUC: 0.8870549481704265

Classification report: 
              precision    recall  f1-score   support

           0       0.99      0.78      0.87      6378
           1       0.80      0.99      0.89      5694

    accuracy                           0.88     12072
   macro avg       0.90      0.89      0.88     12072
weighted avg       0.90      0.88      0.88     12072

Time taken: 21.02581238746643
**************************************************
Report for SVC(kernel='linear', random_state=0)
SVC(kernel='linear', random_state=0) Confusion  matrix:
[[5147 1231]
 [1402 4292]]

SVC(kernel='linear', random_state=0) accuracy mean: 0.7832266865884951
SVC(kernel='linear', random_state=0) accuracy std dev: 0.006739453313761932
SVC(kernel='linear', random_state=0) preciosn score: 0.777113887380047
SVC(kernel='linear', random_state=0) recall score: 0.753775904460836
SVC(kernel='linear', random_state=0) f1 score: 0.7652670054381742
SVC(kernel='linear', random_state=0) AUC: 0.7803843460842907

Classification report: 
              precision    recall  f1-score   support

           0       0.79      0.81      0.80      6378
           1       0.78      0.75      0.77      5694

    accuracy                           0.78     12072
   macro avg       0.78      0.78      0.78     12072
weighted avg       0.78      0.78      0.78     12072

Time taken: 500.4919526576996
**************************************************
Report for GaussianNB()
GaussianNB() Confusion  matrix:
[[4797 1581]
 [1858 3836]]

GaussianNB() accuracy mean: 0.7092204639144837
GaussianNB() accuracy std dev: 0.0048718619517760615
GaussianNB() preciosn score: 0.708141037474617
GaussianNB() recall score: 0.6736916051984545
GaussianNB() f1 score: 0.6904869048690487
GaussianNB() AUC: 0.7129041280931125

Classification report: 
              precision    recall  f1-score   support

           0       0.72      0.75      0.74      6378
           1       0.71      0.67      0.69      5694

    accuracy                           0.72     12072
   macro avg       0.71      0.71      0.71     12072
weighted avg       0.71      0.72      0.71     12072

Time taken: 0.2903409004211426
**************************************************
Report for DecisionTreeClassifier(criterion='entropy')
DecisionTreeClassifier(criterion='entropy') Confusion  matrix:
[[5701  677]
 [   0 5694]]

DecisionTreeClassifier(criterion='entropy') accuracy mean: 0.9396903393923811
DecisionTreeClassifier(criterion='entropy') accuracy std dev: 0.0051926634900044686
DecisionTreeClassifier(criterion='entropy') preciosn score: 0.8937372469000157
DecisionTreeClassifier(criterion='entropy') recall score: 1.0
DecisionTreeClassifier(criterion='entropy') f1 score: 0.9438872772482386
DecisionTreeClassifier(criterion='entropy') AUC: 0.9469269363436814

Classification report: 
              precision    recall  f1-score   support

           0       1.00      0.89      0.94      6378
           1       0.89      1.00      0.94      5694

    accuracy                           0.94     12072
   macro avg       0.95      0.95      0.94     12072
weighted avg       0.95      0.94      0.94     12072

Time taken: 2.080810546875
**************************************************
Report for RandomForestClassifier(criterion='entropy', n_estimators=10)
RandomForestClassifier(criterion='entropy', n_estimators=10) Confusion  matrix:
[[5921  457]
 [   6 5688]]

RandomForestClassifier(criterion='entropy', n_estimators=10) accuracy mean: 0.9579156253226202
RandomForestClassifier(criterion='entropy', n_estimators=10) accuracy std dev: 0.0023511646689097546
RandomForestClassifier(criterion='entropy', n_estimators=10) preciosn score: 0.9256305939788446
RandomForestClassifier(criterion='entropy', n_estimators=10) recall score: 0.9989462592202318
RandomForestClassifier(criterion='entropy', n_estimators=10) f1 score: 0.9608919672269618
RandomForestClassifier(criterion='entropy', n_estimators=10) AUC: 0.9636468517800751

Classification report: 
              precision    recall  f1-score   support

           0       1.00      0.93      0.96      6378
           1       0.93      1.00      0.96      5694

    accuracy                           0.96     12072
   macro avg       0.96      0.96      0.96     12072
weighted avg       0.96      0.96      0.96     12072

Time taken: 3.645834445953369
**************************************************
Report for GradientBoostingClassifier(learning_rate=1.0)
GradientBoostingClassifier(learning_rate=1.0) Confusion  matrix:
[[5185 1193]
 [ 842 4852]]

GradientBoostingClassifier(learning_rate=1.0) accuracy mean: 0.8358322464316764
GradientBoostingClassifier(learning_rate=1.0) accuracy std dev: 0.007527345236217636
GradientBoostingClassifier(learning_rate=1.0) preciosn score: 0.8026468155500414
GradientBoostingClassifier(learning_rate=1.0) recall score: 0.8521250439058659
GradientBoostingClassifier(learning_rate=1.0) f1 score: 0.8266462219950593
GradientBoostingClassifier(learning_rate=1.0) AUC: 0.83253790608589

Classification report: 
              precision    recall  f1-score   support

           0       0.86      0.81      0.84      6378
           1       0.80      0.85      0.83      5694

    accuracy                           0.83     12072
   macro avg       0.83      0.83      0.83     12072
weighted avg       0.83      0.83      0.83     12072

Time taken: 42.6148464679718
**************************************************
Report for AdaBoostClassifier()
AdaBoostClassifier() Confusion  matrix:
[[5151 1227]
 [1314 4380]]

AdaBoostClassifier() accuracy mean: 0.7918425495426625
AdaBoostClassifier() accuracy std dev: 0.004673297302627412
AdaBoostClassifier() preciosn score: 0.7811663991439273
AdaBoostClassifier() recall score: 0.7692307692307693
AdaBoostClassifier() f1 score: 0.7751526413591717
AdaBoostClassifier() AUC: 0.7884253563933714

Classification report: 
              precision    recall  f1-score   support

           0       0.80      0.81      0.80      6378
           1       0.78      0.77      0.78      5694

    accuracy                           0.79     12072
   macro avg       0.79      0.79      0.79     12072
weighted avg       0.79      0.79      0.79     12072

Time taken: 13.443815231323242
**************************************************
